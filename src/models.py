from __future__ import annotations

from typing import TYPE_CHECKING

from tortoise import fields
from tortoise.contrib.postgres.fields import ArrayField
from tortoise.models import Model

if TYPE_CHECKING:
    from tortoise.fields import ManyToManyRelation


class Cve(Model):
    """Model that represents Common Vulnerabilities and Exposures."""

    cve_id = fields.CharField(
        index=True,
        unique=True,
        max_length=20,
    )
    published = fields.DatetimeField()
    notified = fields.BooleanField(default=False)

    updated = fields.DatetimeField(auto_now=True)
    created = fields.DatetimeField(auto_now_add=True)

    class Meta:
        ordering = ["-published"]

    def __str__(self) -> str:
        return self.cve_id

    def __repr__(self) -> str:
        pk, cve_id, notified = self.pk, self.cve_id, self.notified
        return f"<{self.__class__.__name__} {pk=} {cve_id=} {notified=}>"


class Label(Model):
    """Model that is used to label CVEs and Notification Channels."""

    name = fields.CharField(
        index=True,
        unique=True,
        max_length=20,
    )
    keywords = ArrayField(element_type="varchar")

    updated = fields.DatetimeField(auto_now=True)
    created = fields.DatetimeField(auto_now_add=True)

    channels: ManyToManyRelation[NotificationChannel]

    def __str__(self) -> str:
        return self.name

    def __repr__(self) -> str:
        pk, name = self.pk, self.name
        return f"<{self.__class__.__name__} {pk=} {name=}>"


class NotificationChannel(Model):
    """Discord channels that are set up to notify about newly created CVE."""

    channel_id = fields.BigIntField(
        index=True,
        unique=True,
    )
    guild_id = fields.BigIntField(
        index=True,
    )

    labels: ManyToManyRelation[Label] = fields.ManyToManyField(
        model_name="cve_bot.Label",
        related_name="channels",
        through="notificationchannel_label",
        on_delete=fields.CASCADE,
        index=True,
    )

    updated = fields.DatetimeField(auto_now=True)
    created = fields.DatetimeField(auto_now_add=True)

    def __str__(self) -> str:
        return str(self.channel_id)

    def __repr__(self) -> str:
        pk, channel_id, guild_id = self.pk, self.channel_id, self.guild_id
        return f"<{self.__class__.__name__} {pk=} {channel_id=} {guild_id=}>"
