from __future__ import annotations

import logging

import discord
from discord import app_commands as ac
from tortoise.exceptions import DoesNotExist

from .autocomplete import label_autocomplete
from models import Label, NotificationChannel

logger = logging.getLogger(__name__)


class LabelGroup(
    ac.Group,
    name="label",
    description="Command group for CVE labels.",
    guild_only=True,
):
    """Command group for CVE labels.

    Commands:
        `label_list`
            Lists all labels.

        `label_show`
            Shows information about a label.
    """

    @ac.command(name="list")
    async def label_list(
        self,
        interaction: discord.Interaction,
    ) -> None:
        """Lists all labels.

        Sends an embed which displays all available labels in the description.
        """
        labels = await Label.all()

        description = ""
        for i, label in enumerate(labels, 1):
            channels = await label.channels.filter(guild_id=interaction.guild_id)
            description += f"{i}. **{label.name}** (channels using: **{len(channels)}**)\n"

        embed = discord.Embed(
            title="Labels",
            description=description,
            colour=discord.Colour.blue(),
        )

        await interaction.response.send_message(embed=embed)

    @ac.command(name="show")
    @ac.describe(name="Name of the label.")
    @ac.autocomplete(name=label_autocomplete)
    async def label_show(
        self,
        interaction: discord.Interaction,
        *,
        name: str,
    ) -> None:
        """Shows information about a label.

        Sends an embed with a footer and fields:
            - Keywords
            - Created
        """
        try:
            label = await Label.get(name__iexact=name)
        except DoesNotExist:
            return await interaction.response.send_message(f"Label `{name}` does not exist.")

        channels = await label.channels.filter(guild_id=interaction.guild_id)

        embed = discord.Embed(title=label.name)

        keywords_value = "\n".join(f"- `{keyword}`" for keyword in label.keywords)

        # Label All won't have any keywords
        embed.add_field(name="Keywords", value=keywords_value or "**ALL**", inline=False)

        embed.add_field(name="Created", value=discord.utils.format_dt(label.created), inline=False)

        if (channels_amount := len(channels)) == 1:
            footer_text = f"{channels_amount} channel is using this label."
        else:
            footer_text = f"{channels_amount} channels are using this label."

        embed.set_footer(text=footer_text)

        await interaction.response.send_message(embed=embed)


class ChannelGroup(
    ac.Group,
    name="channel",
    description="Command group for CVE channels.",
    guild_only=True,
):
    """Command group for CVE channels.

    Commands:
        `channel_info`
            Shows information about a CVE channel.

        `channel_list`
            Lists all CVE channels in a server.
    """

    @ac.command(name="show")
    async def channel_info(
        self,
        interaction: discord.Interaction,
        *,
        channel: discord.TextChannel,
    ) -> None:
        """Shows information about a CVE channel.

        Sends an embed with fields:
            - Topic
            - Labels
        """
        try:
            channel_db = await NotificationChannel.get(channel_id=channel.id)
        except DoesNotExist:
            return await interaction.response.send_message(f"{channel.mention} is not a notification channel for CVEs.")

        labels = await channel_db.labels.all()

        embed = discord.Embed(title=f"Channel #{channel.name}")

        embed.add_field(name="Topic", value=channel.topic, inline=False)

        labels_value = "\n".join(f"{i}. {label.name}" for i, label in enumerate(labels, 1))
        embed.add_field(name="Labels", value=labels_value, inline=False)

        await interaction.response.send_message(embed=embed)

    @ac.command(name="list")
    @ac.guild_only()
    async def channel_list(
        self,
        interaction: discord.Interaction,
    ) -> None:
        """Lists all CVE channels in a server.

        Sends an embed which displays all CVE channels and tags used by them.
        """
        assert interaction.guild

        guild_id = interaction.guild.id

        channels = await NotificationChannel.filter(guild_id=guild_id)

        description = ""
        for i, channel in enumerate(channels, 1):
            channel_dc = interaction.guild.get_channel(channel.channel_id)
            if channel_dc is None:
                logger.debug(
                    "Channel with id %s not found in guild %s.",
                    channel.channel_id,
                    guild_id,
                )
                continue

            description += f"{i}. {channel_dc.mention}\n"

        embed = discord.Embed(
            title="CVE Channels",
            description=description or "No CVE channels were found.",
            colour=discord.Colour.blue(),
        )

        await interaction.response.send_message(embed=embed)
