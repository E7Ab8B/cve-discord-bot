from __future__ import annotations

import logging

import discord
from discord.ext import commands
from tortoise.exceptions import DoesNotExist, IntegrityError

from models import Label
from utils.cog import BaseCog
from utils.label import clear_cached_label_queries

logger = logging.getLogger(__name__)


class BotOwnerCommands(BaseCog):
    """Bot owner commands."""

    @commands.command(
        name="label-add",
        help="Adds a label. Bot's owner command only.",
        hidden=True,
    )
    @commands.is_owner()
    async def label_add(
        self,
        ctx: commands.Context,
        name: str,
        *keywords: str,
    ) -> None:
        """Adds a label."""
        # Removes whitespaces, empty string and repeats
        final_keywords = {keyword.lower().strip() for keyword in keywords}

        if not final_keywords:
            await ctx.send("At least `1` keyword in `keywords` is required.")
            return

        try:
            await Label.create(name=name, keywords=list(final_keywords))
        except IntegrityError:
            await ctx.send(f"Label with the name `{name}` already exists.")
            return

        clear_cached_label_queries()

        await ctx.send(f"Label `{name}` with keywords `{', '.join(final_keywords)}` was successfully added.")

    @commands.command(
        name="label-remove",
        help="Removes a label. Bot's owner command only.",
        hidden=True,
    )
    @commands.is_owner()
    async def label_remove(
        self,
        ctx: commands.Context,
        name: str,
    ) -> None:
        """Removes a label."""
        try:
            label = await Label.get(name__iexact=name)
        except DoesNotExist:
            await ctx.send(f"Label with the name `{name}` does not exist")
            return

        channels = await label.channels.all()

        await label.delete()

        # Notifies all the channels which used the label, that it has been removed
        for channel in channels:
            text_channel = self.bot.get_channel(channel.channel_id)
            if not isinstance(text_channel, discord.TextChannel):
                continue

            await text_channel.send(f"Label `{label.name}` was removed and will no longer be used.")

        clear_cached_label_queries()

        await ctx.send(f"Label `{label.name}` was successfully removed")

    @label_remove.error
    @label_add.error
    async def label_commands_error(self, ctx: commands.Context, error: commands.CommandError) -> None:
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send("Missing required argument `name`.")
