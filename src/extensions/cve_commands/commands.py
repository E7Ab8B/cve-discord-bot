from __future__ import annotations

import logging
from typing import TYPE_CHECKING

from discord import app_commands as ac

from utils.cog import BaseCog
from utils.cve import CveNotFoundError, first_from_cves_response, request_cves
from utils.embeds import CveEmbed
from utils.label import get_label_values
from utils.serializers import CveEmbedSerializer

if TYPE_CHECKING:
    import discord

logger = logging.getLogger(__name__)


class CveCommands(BaseCog):
    """Cog that implements commands for CVEs.

    Commands:
        `get_cve`
            Returns an embed with the information about the CVE from NIST API.
    """

    @ac.checks.cooldown(1, 10)
    @ac.command(name="get-cve")
    async def get_cve(
        self,
        interaction: discord.Interaction,
        *,
        cve_id: str,
    ) -> None:
        """Returns an embed with the information about the CVE from NIST API."""
        if (data := await request_cves(self.bot.session, params={"cveId": cve_id})) is None:
            return await interaction.response.send_message("Failed to request NIST API. Try again later.")

        try:
            cve_data = first_from_cves_response(data)
        except CveNotFoundError:
            return await interaction.response.send_message(f"**{cve_id}** was not found.")

        try:
            serializer = CveEmbedSerializer.parse_obj(cve_data)
        except Exception:
            logging.exception("Error parsing CVE %s", cve_id)
            return await interaction.response.send_message(f"Received invalid response for **{cve_id}**.")

        label_values = await get_label_values("name", "keywords")
        for name, keywords in label_values:
            # NOTE: Label for labelling ALL CVEs
            found_keywords = serializer.add_label(name) if name == "All" else serializer.add_label(name, keywords)
            if found_keywords:
                logger.debug(
                    "Found keywords: %s for label %s in %s",
                    found_keywords,
                    name,
                    serializer.cve_id,
                )

        embed = CveEmbed.from_serializer(serializer)

        await interaction.response.send_message(embed=embed)

    @get_cve.error
    async def get_cve_error(
        self,
        interaction: discord.Interaction,
        error: ac.AppCommandError,
    ) -> None:
        if isinstance(error, ac.CommandOnCooldown):
            await interaction.response.send_message(str(error), ephemeral=True)
