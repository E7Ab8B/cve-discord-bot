from __future__ import annotations

from typing import TYPE_CHECKING

import discord

from utils.serializers import CveEmbedSerializer

if TYPE_CHECKING:
    import datetime as dt


class CveEmbed(discord.Embed):
    """Embed for CVE which includes dates, labels, description and url fields."""

    def __init__(self, *args, **kwargs) -> None:
        if not (kwargs.get("colour") or kwargs.get("color")):
            kwargs["colour"] = discord.Colour.dark_blue()

        super().__init__(*args, **kwargs)

    @classmethod
    def from_serializer(cls, serializer: CveEmbedSerializer) -> CveEmbed:
        """Creates an embed from serializer. Adds title and all needed fields."""
        embed = cls(title=serializer.cve_id)

        # Dates
        embed.add_published_field(serializer.published)
        embed.add_last_modified_field(serializer.last_modified)

        # Info
        embed.add_labels_field(serializer.labels)
        embed.add_description_field(serializer.description)
        embed.add_references_field(serializer.reference_urls)

        return embed

    def add_labels_field(self, labels: list[str]) -> None:
        labels_value = ", ".join(f"`{label}`" for label in labels)

        self.add_field(
            name="Labels",
            value=labels_value or "**NONE**",
            inline=False,
        )

    def add_published_field(self, published: dt.datetime) -> None:
        self.add_field(
            name="Published",
            value=discord.utils.format_dt(published),
            inline=True,
        )

    def add_last_modified_field(self, last_modified: dt.datetime) -> None:
        self.add_field(
            name="Last Modified",
            value=discord.utils.format_dt(last_modified),
            inline=True,
        )

    def add_description_field(self, description: str | None) -> None:
        self.add_field(
            name="Description",
            value=description or "Not found any english descriptions.",
            inline=False,
        )

    def add_references_field(self, reference_urls: list[str]) -> None:
        self.add_field(
            name="References",
            value="\n".join(f"- {url}" for url in reference_urls) or "None",
            inline=False,
        )
