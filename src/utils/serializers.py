from __future__ import annotations

import datetime as dt
from collections.abc import Sequence
from typing import TypedDict

from pydantic import BaseModel, Field, PrivateAttr


class CveCreateSerializer(BaseModel):
    cve_id: str = Field(
        default=None,
        alias="id",
        max_length=20,
    )
    published: str


class Description(TypedDict):
    lang: str
    value: str


class Reference(TypedDict):
    url: str
    source: str


class CveEmbedSerializer(BaseModel):
    cve_id: str = Field(
        default=None,
        alias="id",
    )
    descriptions: list[Description]
    published: dt.datetime
    last_modified: dt.datetime = Field(
        default=None,
        alias="lastModified",
    )
    references: list[Reference]
    _labels: list[str] = PrivateAttr(default_factory=list)

    @property
    def description(self) -> str:
        for description in self.descriptions:
            if description["lang"] == "en":
                return description["value"]

        return ""

    @property
    def reference_urls(self) -> list[str]:
        return [reference["url"] for reference in self.references]

    @property
    def labels(self) -> list[str]:
        return self._labels

    @labels.setter
    def labels(self, value: list[str]) -> None:
        self._labels = value

    def _add_label(self, label: str) -> None:
        self._labels.append(label)

    def add_label(self, label: str, keywords: list[str] | None = None) -> list[str]:
        """Adds label if keywords were found and returns the found ones.

        If :param:`keywords` is provided, checks if at least one of them
        exists else adds immediately and returns :obj:`True`.
        """
        if keywords is None:
            self._add_label(label)
            return []

        if found_keywords := self.find_keywords(keywords):
            self.add_label(label)

        return found_keywords

    def find_keywords(self, keywords: Sequence[str]) -> list[str]:
        """Returns keywords that are found in :attr:`description`.

        Notes:
            Keywords that are provided should be in lower case.
        """
        lowered_description = self.description.lower()
        return [keyword for keyword in keywords if keyword in lowered_description]
