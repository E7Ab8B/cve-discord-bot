from __future__ import annotations

import contextlib
import logging
from collections.abc import Generator
from logging.handlers import RotatingFileHandler

from rich.console import Console
from rich.logging import RichHandler

import discord

from config import DEBUG, LOGGING_LEVEL


class RemoveNoise(logging.Filter):
    def __init__(self) -> None:
        super().__init__(name="discord.state")

    def filter(self, record: logging.LogRecord) -> bool:
        return record.levelname != "WARNING" or "referencing an unknown" not in record.msg


def discord_setup_logging() -> None:
    handler = RichHandler(
        console=Console(width=180),
        rich_tracebacks=True,
        enable_link_path=False,
    )

    formatter = logging.Formatter(
        fmt="{name}: {message}",
        datefmt="[%X]" if DEBUG else "[%x %X]",
        style="{",
    )

    discord.utils.setup_logging(
        handler=handler,
        formatter=formatter,
        level=logging.getLevelName(LOGGING_LEVEL),
    )


@contextlib.contextmanager
def setup_logging() -> Generator[None, None, None]:
    logger = logging.getLogger()

    try:
        discord_setup_logging()

        logging.getLogger("discord").setLevel(logging.INFO)
        logging.getLogger("discord.http").setLevel(logging.WARNING)
        logging.getLogger("discord.state").addFilter(RemoveNoise())

        logging.getLogger("tortoise").setLevel(logging.INFO)

        max_bytes = 6 * 1024 * 1024  # 3 MiB
        file_handler = RotatingFileHandler(
            filename="cve-bot.log",
            encoding="utf-8",
            maxBytes=max_bytes,
            backupCount=5,
        )

        formatter = logging.Formatter(
            fmt="[{asctime}] [{levelname:<7}] {name}: {message}",
            style="{",
        )

        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)

        yield

    finally:
        handlers = logger.handlers[:]
        for hdlr in handlers:
            hdlr.close()
            logger.removeHandler(hdlr)
