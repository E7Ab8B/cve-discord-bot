from datetime import datetime, timedelta, timezone
from functools import wraps

from async_lru import alru_cache


def timed_alru_cache(seconds: int, maxsize: int = 128):
    def wrapper_cache(func):
        func = alru_cache(maxsize=maxsize)(func)
        func.lifetime = timedelta(seconds=seconds)
        func.expiration = datetime.now(timezone.utc) + func.lifetime

        @wraps(func)
        def wrapped_func(*args, **kwargs):
            if datetime.now(timezone.utc) >= func.expiration:
                func.cache_clear()
                func.expiration = datetime.now(timezone.utc) + func.lifetime

            return func(*args, **kwargs)

        return wrapped_func

    return wrapper_cache
