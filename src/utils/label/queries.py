from __future__ import annotations

__all__ = (
    "get_label_names",
    "get_label_values",
    "clear_cached_label_queries",
)

from typing import Any

from models import Label
from utils.cache import timed_alru_cache


@timed_alru_cache(seconds=300)
async def get_label_names(*, limit: int, **filter_kwargs) -> list[Any] | tuple[Any, ...] | None:
    """Returns a :obj:`list` of label names that were found.

    Labels should not be added too often, that's why it's cached.
    """
    return await Label.filter(**filter_kwargs).only("name").limit(limit).values_list("name", flat=True)


@timed_alru_cache(seconds=300)
async def get_label_values(
    *values: str,
    order_by: str = "name",
    **filter_kwargs,
) -> list[list] | tuple[list, ...]:
    """
    Returns a sequence of values for each found :class:`~models.Label` that
    was found.

    Labels should not be added too often, that's why it's cached.
    """
    return await Label.filter(**filter_kwargs).order_by(order_by).only(*values).values_list(*values)


def clear_cached_label_queries() -> None:
    get_label_names.cache_clear()
    get_label_values.cache_clear()
