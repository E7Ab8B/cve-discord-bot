from __future__ import annotations

__all__ = (
    "add_latest_cve",
    "create_cve",
    "set_cves_notified",
)

from typing import TYPE_CHECKING

from .api import retrieve_latest_cve
from models import Cve
from utils.serializers import CveCreateSerializer

if TYPE_CHECKING:
    import aiohttp

    from utils.types import CveResponse


async def add_latest_cve(session: aiohttp.ClientSession) -> Cve:
    """
    Returns :class:`~models.Cve` instance which was added and is the
    latest CVE in NIST.
    """
    latest_cve = await retrieve_latest_cve(session)
    return await create_cve(latest_cve)


async def create_cve(cve: CveResponse) -> Cve:
    """Creates :class:`~models.Cve` instance in the DB and returns it."""
    serializer = CveCreateSerializer.parse_obj(cve)
    return await Cve.create(**serializer.dict())


async def set_cves_notified(cves: list[Cve]) -> None:
    """
    Sets :attr:`~models.Cve.notified` to :obj:`True` for all
    :class:`~models.Cve` in :param:`cves`.
    """
    for cve in cves:
        cve.notified = True  # type: ignore # typing issue for BooleanFields in Tortoise

    await Cve.bulk_update(cves, fields=["notified"])
