from __future__ import annotations

__all__ = (
    "request_cves",
    "first_from_cves_response",
    "retrieve_latest_cve",
)

import json
import logging
from collections.abc import Mapping
from typing import NoReturn

import aiohttp

from .exceptions import CveNotFoundError
from config import CVE_NIST_URL
from utils.types import CveResponse, CvesResponse

logger = logging.getLogger(__name__)


async def request_cves(
    session: aiohttp.ClientSession,
    *,
    params: Mapping[str, str | int] | None = None,
) -> CvesResponse | None:
    """Sends a request to CVE NIST API with :param:`params`."""
    try:
        async with session.get(CVE_NIST_URL, params=params) as response:
            # Rate limit from NIST
            # The public rate limit (without an API key) is 5 requests in a rolling 30 second window.
            if response.status == 403:
                logger.debug("Got rate limited on NIST API.")
                return None

            try:
                response.raise_for_status()
            except aiohttp.ClientResponseError:
                logger.exception(
                    "Got response status %s from NIST API for retrieving latest CVEs. URL=%s",
                    response.status,
                    response.url,
                )
                return None

            try:
                data: CvesResponse = await response.json()
            except json.JSONDecodeError:
                logging.exception("Error decoding CVE response. URL=%s", response.url)
                response.request_info
                return None
    except aiohttp.ServerDisconnectedError:
        logger.error("NIST API disconnected.")
        return None

    return data


def first_from_cves_response(data: CvesResponse) -> CveResponse:
    """Retrieves the first CVE that was provided in :param:`data`.

    Raises:
        :exc:`~utils.cve.exceptions.CveNotFoundError`
            If CVE was not found.
    """
    vulnerabilities = data.get("vulnerabilities")
    if not isinstance(vulnerabilities, list):
        raise CveNotFoundError()

    try:
        return data["vulnerabilities"][0]["cve"]
    except (KeyError, IndexError) as e:
        logger.debug(
            "CVE does not have 'cve' key in the data. Keys that exist: %s",
            ", ".join(data["vulnerabilities"][0]),
            exc_info=e,
        )
        raise CveNotFoundError("CVE has invalid data.") from e


async def retrieve_latest_cve(session: aiohttp.ClientSession) -> CveResponse:
    """Returns the latest CVE from NIST API.

    Raises:
        :exc:`~utils.cve.exceptions.CveNotFoundError`
            If CVE was not found.
    """

    def raise_not_found() -> NoReturn:
        logger.error("Failed to retrieve latest CVE.")
        raise CveNotFoundError

    data = await request_cves(session, params={"resultsPerPage": 1})
    if data is None:
        raise_not_found()

    last_index = data["totalResults"] - 1

    latest_data = await request_cves(session, params={"startIndex": last_index})
    if latest_data is None:
        raise_not_found()

    return first_from_cves_response(latest_data)
